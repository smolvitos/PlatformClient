<template>
  <div class="md-layout md-alignment-center-center">
    <form novalidate class="md-layout md-alignment-center-center" @submit.prevent="validateAuthorizeUser">
      <md-card class="md-layout-item md-size-50">
        <md-card-header>
          <div class="md-title">Авторизация</div>
        </md-card-header>

        <md-card-content>
          <md-field :class="getValidationClass('login')">
            <label for="login">Логин</label>
            <md-input type="login" name="login" id="login" autocomplete="login" v-model="form.login" :disabled="sending" />
            <span class="md-error" v-if="!$v.form.login.required">Укажите ваш логин</span>
          </md-field>

          <md-field :class="getValidationClass('password')">
            <label for="password">Пароль</label>
            <md-input type="password" name="password" id="password" autocomplete="password" v-model="form.password" :disabled="sending" />
            <span class="md-error" v-if="!$v.form.password.required">Укажите ваш пароль</span>
          </md-field>
        </md-card-content>

        <md-progress-bar md-mode="indeterminate" v-if="sending" />

        <md-card-actions>
          <md-button class="md-primary" :disabled="sending"><router-link to="/signup">Регистрация</router-link></md-button>
          <md-button type="submit" class="md-primary" :disabled="sending">Войти</md-button>
        </md-card-actions>
      </md-card>

      <md-snackbar :md-active.sync="userSaved">Signin attempt</md-snackbar>
    </form>
  </div>
</template>

<script>
  import { validationMixin } from 'vuelidate'
  import {
    required,
  } from 'vuelidate/lib/validators'
  import appService from '@/services/appService'

  export default {
    name: 'Signin',
    mixins: [validationMixin],
    data: () => ({
      form: {
        login: null,
        password: null
      },
      user: {
        login: null,
        password: null
      },
      userSaved: false,
      sending: false
    }),
    validations: {
      form: {
        login: {
          required, 
        },
        password: {
          required,
        }
      },
    },
    methods: {
      getValidationClass (fieldName) {
        const field = this.$v.form[fieldName]

        if (field) {
          return {
            'md-invalid': field.$invalid && field.$dirty
          }
        }
      },
      clearForm () {
        this.$v.$reset()
        this.form.login = null
        this.form.password = null
      },
      async authorizeUser () {
        this.sending = true

        let user = {
          login: this.form.login,
          password: this.form.password
        }
        
        let response = await appService.signIn(user)

        this.userSaved = true
        this.sending = false
        this.clearForm()
      },
      validateAuthorizeUser () {
        this.$v.$touch()

        if (!this.$v.$invalid) {
          this.authorizeUser()
        }
      }
    }
  }
</script>
